image: openjdk:8-jdk

before_script:
  - cd /opt
  - wget http://ftp.unicamp.br/pub/apache/maven/maven-3/3.6.2/binaries/apache-maven-3.6.2-bin.tar.gz
  - tar xzvf apache-maven-3.6.2-bin.tar.gz
  - export PATH=${PATH}:/opt/apache-maven-3.6.2/bin/
  - cd $CI_PROJECT_DIR

stages:
  - test
  - build
  - deploy
  
teste:
  stage: test
  script:
    - mvn test
  
build:
  stage: build
  script:
    - mvn clean package
    - mvn package -Dp.type=jar
  artifacts:
    name: Pacote-Build
    paths:
      - target/*.jar
      - target/*.war
    expire_in: 1 week

deploy_heroku:
  stage: deploy
  dependencies:
    - build
  before_script:
    - curl https://cli-assets.heroku.com/install.sh | sh
  script:
    - heroku plugins:install java
    - heroku deploy:jar target/ROOT.jar --app dn-teste
  environment:
    name: HerokuTest
    url: https://dn-teste.herokuapp.com/playground
#  rules:
#    - if: '$DEPLOY_MODE == "HEROKU"'
#      when: on_success
#    - when: manual
  when: manual
  
#deploy_ssh:
#  stage: deploy
#  before_script:
#    - apt update
#    - apt install sshpass
#    - mkdir -p ~/.ssh
#    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
#  script:
#    - sshpass -p $SSH_SENHA ssh -tt ${SSH_USUARIO}@${SSH_SERVIDOR} "cd $SSH_SERVICES_SOURCE_PATH;echo $SSH_SENHA | sudo -S git pull"
#    - sshpass -p $SSH_SENHA ssh -tt ${SSH_USUARIO}@${SSH_SERVIDOR} "cd $SSH_NGINX_SERVICES_PATH;echo $SSH_SENHA | sudo -S ./run.sh --proxy"
#  environment:
#    name: SshEnv
#    url: http://petshop-api-graphql.inema.ba.gov.br/playground
#  when: manual

deploy_ssh:
  stage: deploy
  dependencies:
    - build
  before_script:
    - apt update
    - apt install sshpass
    - mkdir -p ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
  script:
    - sshpass -p $SSH_SENHA ssh ${SSH_USUARIO}@${SSH_SERVIDOR} "mkdir $CI_COMMIT_SHA"
    - sshpass -p $SSH_SENHA scp target/*.war ${SSH_USUARIO}@${SSH_SERVIDOR}:${SSH_PUBLIC_PATH}/${CI_COMMIT_SHA}
    - sshpass -p $SSH_SENHA ssh ${SSH_USUARIO}@${SSH_SERVIDOR} "cd $CI_COMMIT_SHA; echo $SSH_SENHA | sudo -S mv *.war $SSH_SERVICES_SOURCE_PATH/target"
    - sshpass -p $SSH_SENHA ssh ${SSH_USUARIO}@${SSH_SERVIDOR} "echo $SSH_SENHA | sudo -S rm -r $CI_COMMIT_SHA"
  environment:
    name: SshEnv
    url: $SSH_ENV_LINK
#  rules:
#    - if: '$DEPLOY_MODE == "SSH"'
#      when: on_success
#    - when: manual
  when: manual
